48) 994. Rotting Oranges

Difficulty level: Medium


You are given an m x n grid where each cell can have one of three values:

0 representing an empty cell,
1 representing a fresh orange, or
2 representing a rotten orange.
Every minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten.

Return the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return -1.

 

Example 1:


Input: grid = [[2,1,1],[1,1,0],[0,1,1]]
Output: 4
Example 2:

Input: grid = [[2,1,1],[0,1,1],[1,0,1]]
Output: -1
Explanation: The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally.
Example 3:

Input: grid = [[0,2]]
Output: 0
Explanation: Since there are already no fresh oranges at minute 0, the answer is just 0.
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 10
grid[i][j] is 0, 1, or 2.



Solution
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
    public int orangesRotting(int[][] grid) {
        int freshOranges = 0;
        Queue<int[]> q = new LinkedList<>();
        for(int i=0; i<grid.length;i++){
            for(int j=0;j<grid[0].length;j++){
                if(grid[i][j] ==2){
                    q.add(new int[]{i,j}); //let's use an array to find where exactly are the rotting oranges
                } 
                if(grid[i][j] == 1){
                    freshOranges++;
                }
            }
        }
        if(freshOranges ==0) return 0; //If there're no fresh Oranges, we don't need to do bfs
        int minutes =-1; //start with -1 since minutes is 0-based in ths problem
        while(!q.isEmpty()){
            int size = q.size();
            minutes++; // add minutes at every level
            for(int i=0;i<size;i++){
                int[] orange = q.poll();
                int row = orange[0];
                int col = orange[1];
                if(row-1 >=0 && grid[row-1][col] ==1){ //check adjacent tiles for in bounds and has a fresh orange
                    q.add(new int[]{row-1,col});
                    grid[row-1][col] =2; //mark it now as rotting
                    freshOranges--;
                }
                if(row+1<grid.length && grid[row+1][col] ==1){
                    q.add(new int[]{row+1, col});
                     grid[row+1][col] =2;
                    freshOranges--;
                }
                if(col-1 >=0 && grid[row][col-1] ==1){
                    q.add(new int[]{row,col-1});
                     grid[row][col-1] =2;
                    freshOranges--;
                }
                if(col+1<grid[0].length && grid[row][col+1] ==1){
                    q.add(new int[]{row,col+1});
                     grid[row][col+1] =2;
                    freshOranges--;
                }
            }
        }
        
        return freshOranges==0? minutes :-1 ;
    }
}
